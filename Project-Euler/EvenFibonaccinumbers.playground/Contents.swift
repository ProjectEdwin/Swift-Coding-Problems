/*
 
 Solution by Edwin Soto
 
 Project Euler.net
 https://projecteuler.net/problem=2
 
 Even Fibonacci numbers
 Problem 2
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 
 */

var numbers = [Int]()

func storeFibonacciNumbers(with: Int, max: Int) {
    if with != 0 && with != 1 || max < 0 {
        print("Fibonacci sequence starts with 0 or 1. Max must be greater than 0")
        
    } else {
        
        numbers.append(with)
        numbers.append(1)
        
        repeat{
            let lastNum = numbers.last
            let nextToLastNum = numbers[numbers.count-2]
            
            let newNumber = lastNum! + nextToLastNum
            
            numbers.append(newNumber)
            
        } while numbers.last! < max
        
        numbers.popLast()
        
    }
    
    print("Numbers : \(numbers)")
}

func addEvensOnlyIn(array: [Int]) {
    var runningTotal = 0
    
    for number in numbers {
        if number % 2 == 0 {
            runningTotal = runningTotal + number
        }
    }
    
    print("Sum of Evens in Sequence: \(runningTotal)")
}



storeFibonacciNumbers(with: 1, max: 4000000)
addEvensOnlyIn(array: numbers)

